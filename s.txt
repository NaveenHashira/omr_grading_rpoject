

def organize_questions(image_array):
    if not isinstance(image_array, np.ndarray):
        raise TypeError("Input must be a NumPy array.")

    img_height, img_width = image_array.shape[:2]

    num_major_columns = 5
    num_major_rows_per_column = 10
    num_sub_columns_per_row = 4

    major_col_width = img_width // num_major_columns
    
    row_height = img_height // num_major_rows_per_column

    sub_col_width = major_col_width // num_sub_columns_per_row

    final_organized_list = []
    question_number = 1

    for major_col_idx in range(num_major_columns):
        for major_row_idx in range(num_major_rows_per_column):
            for sub_col_idx in range(num_sub_columns_per_row):
                y_start = major_row_idx * row_height
                y_end = y_start + row_height
                x_start = (major_col_idx * major_col_width) + (sub_col_idx * sub_col_width)
                x_end = x_start + sub_col_width
                                
                if y_end > img_height:
                    y_end = img_height
                if x_end > img_width:
                    x_end = img_width

                # Extract the cell
                cell = image_array[y_start:y_end, x_start:x_end]
                
                final_organized_list.append((question_number, cell))
                question_number += 1
    
    return final_organized_list

all_cells = organize_questions(cropped)

myPixelVal = np.zeros((50, 4))
countC = 0
countR = 0

for q_num, image_cell in all_cells:    
    total_pixels = cv2.countNonZero(image_cell) 
    myPixelVal[countR][countC] = total_pixels
    countC += 1
    if countC == 4:
        countR += 1
        countC = 0
print(myPixelVal)

option_map = ['A', 'B', 'C', 'D']

with open("omr_answers.txt", "w") as f:
    for i in range(len(myPixelVal)):
        ans_index = np.argmax(myPixelVal[i])
        answer = option_map[ans_index]
        f.write(f"Q{i+1}: {answer}\n")